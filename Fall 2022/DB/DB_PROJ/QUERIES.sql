USE PROJECT_DB;

/* 1. Find the names of employee who supervises the most number of deliverers */ 

SELECT CONCAT(EMP.FNAME, ' ', EMP.LNAME) as EMP_NAME, COUNT(*) TDLVRS
FROM EMPLOYEE AS EMP
	INNER JOIN MANAGER MNGR
    ON EMP.EMP_ID = MNGR.MID
    INNER JOIN DELIVERER DLVR
    ON MNGR.MID = DLVR.SUPERVISOR_ID
GROUP BY MNGR.MID
ORDER BY TDLVRS DESC;

/* 2. Find the average number of orders placed by Potential Silver Member. */ 

SELECT AVG(ORDR_CNT) 'Average Number of Orders' FROM POTENTIAL_SILVER_MEMBER;

/* 3. Find all the customers who placed orders of the restaurants that belong to Popular
Restaurant Type. Please also report the name of restaurants */ 

SELECT ORD.CUST_ID, ORD.SHOP_ID, SP.SHOP_NAME, CUS.CUISINE_TYPE
FROM ORDER_RELATION ORD
INNER JOIN ORDERS AS ORDS USING (ORDER_ID)
INNER JOIN CUISINE AS CUS USING (SHOP_ID)
INNER JOIN SHOP AS SP USING (SHOP_ID)
INNER JOIN POPULAR_RESTAURANT AS PRST USING (CUISINE_TYPE)
GROUP BY ORD.CUST_ID, ORD.SHOP_ID, CUS.CUISINE_TYPE;

/* 4. List all the customers that have become a silver member within a month of joining the system. */ 

SELECT CUS.CUST_ID, CUS.JOIN_DATE, SCUS.ISSUE_DATE
FROM SILVER_CUST AS SCUS
INNER JOIN CUSTOMER AS CUS USING (CUST_ID)
WHERE CUS.JOIN_DATE >= DATE_SUB(SCUS.ISSUE_DATE, INTERVAL 1 MONTH);

/* 5. Find the names of deliverers who delivered the most orders in past 1 month */ 

SELECT EMP.FNAME, DLVY.DLVER_ID, COUNT(*) AS TDLVYS
FROM DELIVERY DLVY
INNER JOIN ORDER_RELATION AS ORD USING (ORDER_ID)
INNER JOIN ORDERS AS ORDS USING (ORDER_ID)
INNER JOIN EMPLOYEE EMP ON EMP.EMP_ID = DLVY.DLVER_ID
WHERE ORDS.PAYMENT_TIME >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
GROUP BY DLVY.DLVER_ID
ORDER BY TDLVYS DESC;

/* 6. Find the restaurants that provide the most promotion in the past 1 month.  */ 

SELECT RES.SHOP_ID, COUNT(*) NPROMOS
FROM RESTAURANT RES
INNER JOIN PROMOTION AS PR USING(SHOP_ID)
WHERE PR.STARTDATE > DATE_SUB(CURDATE(), INTERVAL 1 MONTH)
GROUP BY RES.SHOP_ID
ORDER BY NPROMOS DESC;

/* 7. Find the customer who have place orders of all Fast Food restaurants.  */ 

SELECT C.CUST_ID, COUNT(*) FF_RES
FROM (SELECT DISTINCT ORD.CUST_ID, ORD.SHOP_ID
		FROM ORDER_RELATION AS ORD
			INNER JOIN RESTAURANT RES USING (SHOP_ID)
			INNER JOIN CUISINE CUS USING (SHOP_ID)
		WHERE CUS.CUISINE_TYPE = 'FAST FOOD'
		GROUP BY ORD.CUST_ID, ORD.SHOP_ID) C
GROUP BY C.CUST_ID
HAVING FF_RES = (SELECT COUNT(*) FF_RESC FROM CUISINE WHERE CUISINE_TYPE = 'FAST FOOD');

/* 8. For each restaurant, list all the customers who placed the order, and the price of each order */ 

SELECT RES.SHOP_ID, ORDS.CUST_ID, SUM(CAST(SUBSTRING_INDEX(ORDER_DETAILS,'$',-1) AS UNSIGNED)) AS TOTAL
FROM ORDERS AS ORD
INNER JOIN ORDER_RELATION AS ORDS USING (ORDER_ID)
INNER JOIN RESTAURANT AS RES USING (SHOP_ID)
GROUP BY ORDS.CUST_ID, RES.SHOP_ID;

/* 9. Find the area that have the most number of restaurants located. */ 

SELECT SHP.AREA, COUNT(*) RESC
FROM SHOP AS SHP
INNER JOIN RESTAURANT AS RES USING (SHOP_ID)
GROUP BY SHP.AREA
ORDER BY RESC DESC;

/* 10. Find the schedule of the restaurant that have the most orders in past 1 month */ 

SELECT SHP.SHOP_ID, SHP.OPEN_TIME, SHP.CLOSE_TIME
FROM SHOP AS SHP
INNER JOIN (
	SELECT ORDS.SHOP_ID, CUS.CUISINE_TYPE, COUNT(*) ORDRC
	FROM ORDER_RELATION AS ORDS
		INNER JOIN RESTAURANT AS RES USING (SHOP_ID)
		INNER JOIN CUISINE AS CUS USING (SHOP_ID)
		INNER JOIN ORDERS AS ORD
	WHERE ORD.PAYMENT_TIME > DATE_SUB(CURDATE(), INTERVAL 1 MONTH) 
	GROUP BY ORDS.SHOP_ID,  CUS.CUISINE_TYPE
	ORDER BY ORDRC DESC
	LIMIT 1
) A USING (SHOP_ID);

/* 11. Find the names of employee who are also a Gold Member. */ 

SELECT EMP.FNAME, EMP.LNAME, EMP.EMP_ID, PR.MEMBERSHIP_ID
FROM PREMIUM AS PR
INNER JOIN EMPLOYEE AS EMP USING (MEMBERSHIP_ID);

/* 12. Find the supermarket that have most different products in stock.  */ 

SELECT A.SHOP_ID, COUNT(*) PRODC
FROM (SELECT SHOP_ID, PROD_ID
		FROM SELLS 
		WHERE QUANTITY > 0
		GROUP BY SHOP_ID, PROD_ID) AS A
GROUP BY A.SHOP_ID
ORDER BY PRODC DESC
LIMIT 1;

/* 13. For each product, list all the supermarket selling it, and the price of the product at the supermarket. */ 
/* INSERT PRODUCT WITH SAME PROD_NAME */
SELECT P.PROD_NAME, P.PROD_ID, SM.SHOP_ID, S.PRICE
FROM SELLS AS S
INNER JOIN PRODUCT P USING (PROD_ID)
INNER JOIN SUPERMARKET SM USING (SHOP_ID);